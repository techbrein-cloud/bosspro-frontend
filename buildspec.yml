version: 0.2

env:
  variables:
    # public build vars (keep as-is or override in CodeBuild console)
    REPOSITORY_URI: 051502724052.dkr.ecr.ap-south-1.amazonaws.com/bosspro/frontend
    NEXT_PUBLIC_API_BASE_URL: "https://project.serperp.com"
    NEXT_PUBLIC_GOOGLE_API_BASE_URL: "http://fileservice.serperp.com"
    NEXT_PUBLIC_USER_SERVICE_URL: "https://userservice.serperp.com"
    NEXT_PUBLIC_AI_SERVICE_URL: "https://n8n.serperp.com/webhook/chat"
    NEXT_PUBLIC_CLERK_SIGN_IN_URL: "/sign-in"
    NEXT_PUBLIC_CLERK_SIGN_UP_URL: "/sign-up"

  secrets-manager:
    # CodeBuild will inject the secret *values* (not the ARNs) into these env vars
    CLERK_SECRET_KEY: "arn:aws:secretsmanager:ap-south-1:051502724052:secret:clerk/production-tlSrO9"
    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: "arn:aws:secretsmanager:ap-south-1:051502724052:secret:PUBLIC_CLERK-MbmdaJ"

phases:
  install:
    runtime-versions:
      # use Node 22 runtime
      nodejs: 22
    commands:
      - set -e
      - echo "Using Node $(node -v), npm $(npm -v)"
      - echo "Checking REPOSITORY_URI: $REPOSITORY_URI"
      - if [ -z "$REPOSITORY_URI" ]; then echo "ERROR: REPOSITORY_URI not set"; exit 1; fi

  pre_build:
    commands:
      - echo "Logging in to ECR..."
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $(echo $REPOSITORY_URI | cut -d'/' -f1)
      - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export IMAGE_TAG=${IMAGE_TAG:-build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')}
      - export REPO="$REPOSITORY_URI"
      - echo "COMMIT_HASH=$COMMIT_HASH IMAGE_TAG=$IMAGE_TAG REPO=$REPO"
      - echo "Secrets injection check (masked in logs by CodeBuild):"
      - if [ -z "$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" ]; then echo "NOTE: NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY is empty"; else echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY is set (masked)"; fi

  build:
    commands:
      - echo "Installing dependencies..."
      - npm ci
      - echo "Running build..."
      - |
        if npm run build --loglevel verbose; then
          echo "npm run build succeeded"
        else
          echo "npm run build FAILED â€” dumping diagnostics..."
          echo "----- ls -la -----"
          ls -la
          echo "----- node and npm versions -----"
          node -v && npm -v
          echo "----- npm ls (top) -----"
          npm ls --depth=0 || true
          echo "----- tail npm-debug.log (if exists) -----"
          [ -f npm-debug.log ] && tail -n 200 npm-debug.log || true
          # fail the build so CodeBuild stops (you can comment the next line for debugging)
          exit 1
        fi

      - echo "Building docker image..."
      - TAG="$REPO:latest"
      - FULL_TAG="$REPO:$IMAGE_TAG"
      - echo "TAG=$TAG FULL_TAG=$FULL_TAG"
      - |
        # build with all public build args; pass publishable key only if present
        DOCKER_BUILD_CMD="docker build --build-arg NEXT_PUBLIC_API_BASE_URL=\"$NEXT_PUBLIC_API_BASE_URL\" --build-arg NEXT_PUBLIC_GOOGLE_API_BASE_URL=\"$NEXT_PUBLIC_GOOGLE_API_BASE_URL\" --build-arg NEXT_PUBLIC_USER_SERVICE_URL=\"$NEXT_PUBLIC_USER_SERVICE_URL\" --build-arg NEXT_PUBLIC_AI_SERVICE_URL=\"$NEXT_PUBLIC_AI_SERVICE_URL\" -t \"$TAG\" ."
        if [ -n "$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" ]; then
          echo "Adding NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY as build-arg (value masked)"
          DOCKER_BUILD_CMD="docker build --build-arg NEXT_PUBLIC_API_BASE_URL=\"$NEXT_PUBLIC_API_BASE_URL\" --build-arg NEXT_PUBLIC_GOOGLE_API_BASE_URL=\"$NEXT_PUBLIC_GOOGLE_API_BASE_URL\" --build-arg NEXT_PUBLIC_USER_SERVICE_URL=\"$NEXT_PUBLIC_USER_SERVICE_URL\" --build-arg NEXT_PUBLIC_AI_SERVICE_URL=\"$NEXT_PUBLIC_AI_SERVICE_URL\" --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=\"$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY\" -t \"$TAG\" ."
        fi
      - eval "$DOCKER_BUILD_CMD"

  post_build:
    commands:
      - echo "Tagging and pushing image to ECR..."
      - if [ -z "$REPO" ]; then echo "ERROR: REPO is empty; aborting tagging"; exit 1; fi
      - docker tag "$REPO:latest" "$REPO:$IMAGE_TAG"
      - docker push "$REPO:latest"
      - docker push "$REPO:$IMAGE_TAG"
      - echo "Writing imagedefinitions.json"
      - printf '[{"name":"%s","imageUri":"%s"}]' "frontend" "$REPO:$IMAGE_TAG" > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
