version: 0.2

env:
  variables:
    # Set your ECR repo
    REPOSITORY_URI: 051502724052.dkr.ecr.ap-south-1.amazonaws.com/bosspro/frontend
    # If your code + Dockerfile live in a subdirectory, set it here (e.g. frontend)
    REPO_SUBDIR: .

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo "Install phase - node $(node -v) npm $(npm -v)"

  pre_build:
    commands:
      - echo "Entered pre_build phase..."
      - echo "Working directory: $(pwd)"
      - echo "Listing repo root:"
      - ls -la
      - echo "Changing to repo subdir: $REPO_SUBDIR"
      - cd $REPO_SUBDIR || (echo "Failed to cd to $REPO_SUBDIR" && exit 1)
      - echo "Now in $(pwd)"
      - echo "Listing files in context:"
      - ls -la
      - echo "Docker version and info:"
      - docker --version || true
      - docker info || true
      - echo "Installing Node.js dependencies..."
      - npm ci || npm install
      - echo "Logging in to Amazon ECR..."
      - aws --version
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7 || echo "local")
      - export IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}' || date +%s)
      - echo "COMMIT_HASH=$COMMIT_HASH IMAGE_TAG=$IMAGE_TAG"

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Printing head of Dockerfile (if exists):"
      - if [ -f Dockerfile ]; then head -n 60 Dockerfile; else echo "No Dockerfile found at $(pwd)"; fi
      - echo "Attempting Next.js build (errors won't stop Docker build):"
      - npm run build || echo "Next build failed (continuing)"
      - echo "Attempting docker build (context=$(pwd))..."
      - docker build -t $REPOSITORY_URI:latest . || (echo "docker build FAILED" && docker build -t $REPOSITORY_URI:latest . 2>&1 | tee docker-build-error.log || true)
      - echo "List local images (grep for our repo):"
      - docker images --format '{{.Repository}}:{{.Tag}}' | grep "$REPOSITORY_URI" || true
      - if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^${REPOSITORY_URI}:latest$"; then docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG || true; fi

  post_build:
    commands:
      - echo "Post build started on $(date)"
      - |
        if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^${REPOSITORY_URI}:latest$"; then
          echo "Pushing Docker images to ECR..."
          docker push $REPOSITORY_URI:latest || echo "push latest failed"
          docker push $REPOSITORY_URI:$IMAGE_TAG || echo "push tag failed"
          DOCKER_CONTAINER_NAME=javatechie-registry
          printf '[{"name":"%s","imageUri":"%s"}]' "$DOCKER_CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
          echo "imagedefinitions.json:"
          cat imagedefinitions.json
        else
          echo "No Docker image found. Creating placeholder imagedefinitions.json."
          printf '[]' > imagedefinitions.json
          cat imagedefinitions.json
        fi

artifacts:
  files:
    - imagedefinitions.json
