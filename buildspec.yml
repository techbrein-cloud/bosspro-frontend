version: 0.2

env:
  variables:
    REPOSITORY_URI: "051502724052.dkr.ecr.ap-south-1.amazonaws.com/bosspro/frontend"

  secrets-manager:
    CLERK_SECRET_KEY: "arn:aws:secretsmanager:ap-south-1:051502724052:secret:CLERK_SECRET_KEY-hDz14k"
    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: "arn:aws:secretsmanager:ap-south-1:051502724052:secret:PUBLIC_CLERK_PUBLISHABLE_KEY-IuG2ox"

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo "Install phase - node $(node -v) npm $(npm -v)"
      # Optional: enable BuildKit if you plan to use --secret with docker build
      # - export DOCKER_BUILDKIT=1

  pre_build:
    commands:
      - |
        echo "Entered pre_build phase..."
        echo "Installing Node.js dependencies on host (optional)"
        npm ci || npm install
        echo "Logging in to Amazon ECR..."
        aws --version
        aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
        COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
        IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
        echo "COMMIT_HASH=$COMMIT_HASH IMAGE_TAG=$IMAGE_TAG"
        printf 'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY length=%s\n' "$(printf "%s" "$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" | wc -c)"

  build:
    commands:
      - |
        echo "Build started on $(date)"
        echo "Sanity: print secret lengths (masked)"
        printf 'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY len=%s\n' "$(printf "%s" "$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" | wc -c)"
        printf 'CLERK_SECRET_KEY len=%s\n' "$(printf "%s" "$CLERK_SECRET_KEY" | wc -c)"
        echo "Enabling verbose shell output for debugging"
        set -x
        echo "Running docker build (show full output) ..."
        # IMPORTANT: Do NOT pass CLERK_SECRET_KEY as a build-arg. Keep it runtime-only.
        docker build --progress=plain \
          --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" \
          --build-arg NEXT_PUBLIC_API_BASE_URL="$NEXT_PUBLIC_API_BASE_URL" \
          -t $REPOSITORY_URI:latest .
        echo "Docker build exit code: $?"
        set +x
        docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - |
        echo "Build completed on $(date)"
        if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^${REPOSITORY_URI}:latest$"; then
          echo "Pushing the Docker images to ECR..."
          docker push $REPOSITORY_URI:latest
          docker push $REPOSITORY_URI:$IMAGE_TAG
          echo "Writing imagedefinitions.json for CodePipeline/ECS..."
          DOCKER_CONTAINER_NAME=bosspro-fronted
          printf '[{"name":"%s","imageUri":"%s"}]' "$DOCKER_CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
          echo "imagedefinitions.json:"
          cat imagedefinitions.json
        else
          echo "No docker image found for $REPOSITORY_URI:latest â€” skipping push and imagedefinitions creation."
        fi

artifacts:
  files:
    - imagedefinitions.json
