version: 0.2

env:
  variables:
    # Put your ECR repo here or set it from project env vars
    REPOSITORY_URI: 051502724052.dkr.ecr.ap-south-1.amazonaws.com/bosspro/frontend
    # IMPORTANT: set NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY in the CodeBuild project's environment (Console or SecretsManager).
    # Do NOT hardcode the actual key here.
    # NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: <set-in-project-env>

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo "Install phase - node $(node -v) npm $(npm -v)"

  pre_build:
    commands:
      - echo "Entered pre_build phase..."
      - echo "Installing Node.js dependencies..."
      - npm ci || npm install
      - echo "Logging in to Amazon ECR..."
      - aws --version
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - echo "COMMIT_HASH=$COMMIT_HASH IMAGE_TAG=$IMAGE_TAG"
      - |
        # Fail fast if Clerk publishable key is missing â€” saves build minutes & gives a clear message
        if [ -z "$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" ]; then
          echo "ERROR: NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY is not set. Set it in the CodeBuild project environment (or Secrets Manager)."
          exit 1
        fi

  build:
    commands:
      - echo "Building the Next.js app..."
      - npm run build
      - echo "Building the Docker image..."
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - |
        # If the image exists, push & write imagedefinitions.json pointing to the image
        if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^${REPOSITORY_URI}:latest$"; then
          echo "Pushing Docker images..."
          docker push $REPOSITORY_URI:latest
          docker push $REPOSITORY_URI:$IMAGE_TAG
          DOCKER_CONTAINER_NAME=javatechie-registry
          printf '[{"name":"%s","imageUri":"%s"}]' "$DOCKER_CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
          echo "imagedefinitions.json:"
          cat imagedefinitions.json
        else
          # If no image, write a placeholder imagedefinitions.json so CodeBuild artifact upload doesn't fail.
          echo "No Docker image found. Writing placeholder imagedefinitions.json to prevent artifact upload failure."
          printf '[]' > imagedefinitions.json
          cat imagedefinitions.json
          # Optional: exit 1 to fail the build instead of continuing
          # exit 1
        fi

artifacts:
  files:
    - imagedefinitions.json
