version: 0.2

env:
  shell: bash

phases:
  pre_build:
    commands:
      - echo Entered pre_build phase...
      - echo at repo root
      - echo Installing Node.js dependencies...
      - npm ci || npm install
      - echo Logging in to Amazon ECR...
      - aws --version
      # You can set ACCOUNT_ID and AWS_DEFAULT_REGION as CodeBuild environment variables.
      # REPOSITORY_URI will be constructed from ACCOUNT_ID; alternatively replace the next line with a hardcoded URI.
      - REPOSITORY_URI=051502724052.dkr.ecr.ap-south-1.amazonaws.com/bosspro/frontend
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Next.js app...
      - npm run build
      - echo Building the Docker image...
      # If Dockerfile is in repo root but we cd'ed into a subdir, adjust build context accordingly.
      - docker build -t $REPOSITORY_URI:latest .
      - echo Tagging image with build tag $IMAGE_TAG...
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images to ECR...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing imagedefinitions.json for CodePipeline/ECS...
      - DOCKER_CONTAINER_NAME=javatechie-registry
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo imagedefinitions.json:
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
