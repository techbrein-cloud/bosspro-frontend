version: 0.2

env:
  variables:
    REPOSITORY_URI: "051502724052.dkr.ecr.ap-south-1.amazonaws.com/bosspro/frontend"

  # Secrets Manager mapping (must be under `env:` exactly)
  secrets-manager:
    CLERK_SECRET_KEY: "arn:aws:secretsmanager:ap-south-1:051502724052:secret:clerk/production-tlSrO9"
    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: "arn:aws:secretsmanager:ap-south-1:051502724052:secret:PUBLIC_CLERK-MbmdaJ"

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo "Install phase - node $(node -v) npm $(npm -v)"

  pre_build:
    commands:
      - echo "Entered pre_build phase..."
      - echo "Installing Node.js dependencies on host..."
      - npm ci || npm install
      - echo "Logging in to Amazon ECR..."
      - aws --version
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - echo "COMMIT_HASH=$COMMIT_HASH IMAGE_TAG=$IMAGE_TAG"
      # safe check: print length of publishable key (masked in logs)
      - printf 'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY length=%s\n' "$(printf "%s" "$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" | wc -c)"

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Building the Next.js app (host) - this is optional, but we keep it)"
      - npm run build || true
      - echo "Building Docker image (pass required secrets as build-args)..."
      - docker build \
          --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" \
          --build-arg CLERK_SECRET_KEY="$CLERK_SECRET_KEY" \
          -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo "Build completed on $(date)"
      - |
        if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^${REPOSITORY_URI}:latest$"; then
          echo "Pushing the Docker images to ECR..."
          docker push $REPOSITORY_URI:latest
          docker push $REPOSITORY_URI:$IMAGE_TAG
          echo "Writing imagedefinitions.json for CodePipeline/ECS..."
          DOCKER_CONTAINER_NAME=bosspro-fronted
          printf '[{"name":"%s","imageUri":"%s"}]' "$DOCKER_CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
          echo "imagedefinitions.json:"
          cat imagedefinitions.json
        else
          echo "No docker image found for $REPOSITORY_URI:latest â€” skipping push and imagedefinitions creation."
        fi

artifacts:
  files:
    - imagedefinitions.json
