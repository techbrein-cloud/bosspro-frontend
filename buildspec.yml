version: 0.2

env:
  variables:
    REPOSITORY_URI: 051502724052.dkr.ecr.ap-south-1.amazonaws.com/bosspro/frontend
    # Make sure this matches the container name in your ECS Task Definition:
    DOCKER_CONTAINER_NAME: frontend

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo "Install phase - node $(node -v) npm $(npm -v)"

  pre_build:
    commands:
      - echo "Entered pre_build phase..."
      - echo "Installing Node.js dependencies..."
      - npm ci || npm install
      - echo "Logging in to Amazon ECR..."
      - aws --version
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export IMAGE_TAG=${COMMIT_HASH:-build-${CODEBUILD_BUILD_ID##*:}}
      - echo "COMMIT_HASH=$COMMIT_HASH IMAGE_TAG=$IMAGE_TAG"
      - |
        if [ -n "${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:-}" ]; then
          echo "Clerk publishable key present? yes"
        else
          echo "Clerk publishable key present? no"
        fi

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Building the Next.js app (on host) to catch errors early..."
      - |
        if [ -z "${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:-}" ]; then
          echo "WARNING: NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY is not set in CodeBuild env. If your app requires this at build-time, the docker build will fail."
        fi
      - npm run build || echo "Host build completed (warnings may exist). Continuing to docker build..."
      - echo "Building the Docker image..."
      - docker build --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo "Build completed on $(date)"
      - |
        if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^${REPOSITORY_URI}:latest$"; then
          echo "Pushing the Docker images to ECR..."
          docker push $REPOSITORY_URI:latest
          docker push $REPOSITORY_URI:$IMAGE_TAG
          echo "Writing imagedefinitions.json for CodePipeline/ECS..."
          printf '[{"name":"%s","imageUri":"%s"}]' "$DOCKER_CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
          echo "imagedefinitions.json:"
          cat imagedefinitions.json
        else
          echo "No docker image found for $REPOSITORY_URI:latest â€” failing the build."
          exit 1
        fi

artifacts:
  files:
    - imagedefinitions.json
